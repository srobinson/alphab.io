---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="Redefining DevOps for the modern era. Alphab.io brings AI-powered automation to streamline your development processes. Coming soon!"
		/>
		<meta
			name="keywords"
			content="Intelligent DevOps, Alphab.io, AI solutions, streamline, workflow"
		/>
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	@import url("https://fonts.googleapis.com/css2?family=Anton&family=Noto+Sans+JP:wght@900&display=swap");
	*,
	*::before,
	*::after {
		box-sizing: border-box;
	}

	* {
		margin: 0;
		user-select: none;
	}

	body {
		line-height: 1.5;
		-webkit-font-smoothing: antialiased;
		background: url(loading.jpg) center center no-repeat;
	}
	/*
  5. Improve media defaults
*/

	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);

		--animation-rotate-time: 102s;
		--animation-grow-time: 33s;
	}

	html,
	body {
		margin: 0;
		box-sizing: border-box;
		font-family: system-ui, sans-serif;
		background: #fff;

		display: flex;
		justify-content: center;
		align-items: center;
		height: 100vh;
		width: 100vw;
		background-color: #f0f0f0;
		overflow: hidden;
	}

	body {
		border: #6ff solid 8vw;
	}

	main {
		/* margin: 0 auto; */
		line-height: 1.6;
		position: relative;
	}

	@media (width > 2024px) {
		/* main {
			width: 2024px;
		} */
		body {
			border: #6ff solid 8rem;
		}
		main h1 {
			font-size: 3vw;
		}
	}
	h1 {
		/* transform: translateX(-1rem) translateY(-10rem); */

		background: #fff;

		/* font-size: 6vw; */
		font-size: 3rem;
		font-weight: 900;
		line-height: 1;
		font-family: "Anton", sans-serif;
		color: #c93c4c;
		color: #a11;
		/* color: transparent; */
		opacity: 0.95;
		padding: 4rem 1rem 1rem;
		margin: 0.9;
		position: fixed;
		/* top: 1rem;
		left: 1rem; */
		top: 40vh;
		left: 10vw;
		z-index: 10;
		/* border: 1rem #c93c4c double; */
		border: 0.75rem #a11 solid;
		border: #6ff solid 10px;
		/* border: 0.75rem #c93c4c solid; */
		/* border-radius: 4rem; */
		border-top-left-radius: 4rem;
		border-top-right-radius: 1rem;

		box-shadow:
			rgba(0, 0, 0, 0.09) 0px 2px 1px,
			rgba(0, 0, 0, 0.09) 0px 4px 2px,
			rgba(0, 0, 0, 0.09) 0px 8px 4px,
			rgba(0, 0, 0, 0.09) 0px 16px 8px,
			rgba(0, 0, 0, 0.09) 0px 32px 16px;
	}

	#cube-container {
		position: fixed;
		perspective: 35px;
		width: 200px;
		height: 200px;
	}

	#cube {
		position: relative;
		transform-style: preserve-3d;
		width: 100%;
		height: 100%;
		animation: rotateCube var(--animation-rotate-time) linear infinite;
	}

	.face {
		position: absolute;
		width: 100%;
		height: 100%;
		border: 2px solid #333;
		display: flex;
		justify-content: center;
		align-items: center;
		font-size: 24px;
		color: white;
		color: #c93c4c;
		animation: growAndShrink var(--animation-grow-time) ease-in-out infinite;
	}

	.front {
		background-color: rgba(0, 0, 255, 0.7);
		transform: rotateY(0deg) translateZ(100px);
	}

	.back {
		background-color: rgba(255, 0, 0, 0.7);
		transform: rotateY(180deg) translateZ(100px);
	}

	.right {
		background-color: rgba(0, 255, 0, 0.7);
		transform: rotateY(90deg) translateZ(100px);
	}

	.left {
		background-color: rgba(255, 255, 0, 0.7);
		transform: rotateY(-90deg) translateZ(100px);
	}

	.top {
		background-color: rgba(255, 0, 255, 0.7);
		transform: rotateX(90deg) translateZ(100px);
	}

	.bottom {
		background-color: rgba(0, 255, 255, 0.7);
		transform: rotateX(-90deg) translateZ(100px);
	}

	@keyframes rotateCube {
		from {
			transform: rotateY(0deg) rotateX(0deg) rotateZ(0deg);
		}

		50% {
			transform: rotateY(180deg) rotateX(360deg) rotateZ(360deg);
		}

		to {
			transform: rotateY(360deg) rotateX(720deg) rotateZ(720deg);
		}
	}

	@keyframes growAndShrink {
		0%,
		100% {
			width: 200px;
			height: 200px;
		}

		50% {
			width: 250px;
			height: 250px;
		}
	}
</style>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		document.addEventListener("mousedown", function (event) {
			const container = document.getElementById("cube-container");
			// Get the mouse position relative to the viewport
			let mouseX = event.clientX;
			let mouseY = event.clientY;

			// Adjust for the center of the cube (assuming the size is 50px x 50px, half its width and height)
			let cubeSizeHalf = 100;

			// Set the position of the cube to follow the mouse
			if (container) container.style.left = `${mouseX - cubeSizeHalf}px`;
			if (container) container.style.top = `${mouseY - cubeSizeHalf}px`;

			const cube = document.getElementById("cube");
			let time = Math.random();
			if (time < 0.1) {
				time = 0.1;
			}
			if (cube)
				cube.style.setProperty(
					"--animation-rotate-time",
					Math.ceil(time * 102) + "s",
				);
			if (time < 0.5) {
				time = 0.5;
			}
			if (container)
				container.style.setProperty(
					"--animation-grow-time",
					Math.ceil(time * 33) + "s",
				);
		});
	});
</script>
